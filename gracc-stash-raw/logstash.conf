input {
    rabbitmq {
        host => "${AMQP_HOST:localhost}"
        port => "${AMQP_PORT:5672}"
        ssl => "${AMQP_SSL:false}"
        vhost => "${AMQP_VHOST:/}"
        user => "${AMQP_USER:guest}"
        password => "${AMQP_PASSWORD:guest}"

        exchange => "gracc.${GRACC_STREAM}.raw"
        exchange_type => "fanout"
        queue => "${GRACC_INSTANCE}.${GRACC_STREAM}.raw3"
        durable => true

        codec => "json"
        type => "JobUsageRecord"
    }
}
filter {
    mutate {
        add_field => { "@received" => "%{@timestamp}" }
    }
    # use EndTime as logstash timestamp
    if [EndTime] {
        date {
            match => [ 'EndTime', 'ISO8601' ]
        }
    } else {
        # Try to calculate EndTime. Quarantine if we can't
        ruby {
            code => "
                if event.include?('StartTime') && event.include?('WallDuration') then
                    start = Time.parse(event['StartTime'])
                    wall = event['WallDuration'].to_i
                    endt = start + wall
                    recv = Time.parse(event['@received'])
                    if endt > recv then
                        endt = recv
                        start = endt - wall
                        event['StartTime'] = start.iso8601(3)
                    end
                    event['EndTime'] = endt.iso8601(3)
                else
                    event['Quarantine'] ||= 'MissingEndTime'
                end
            "
        }
    }
    # Convert numeric fields
    mutate {
        convert => {
            "Processors" => "integer"
            "Memory" => "float"
            "Swap" => "float"
            "Network" => "float"
            "Njobs" => "integer"
            "NodeCount" => "integer"
        }
    }
    # Calculate fingerprint
    #  - Remove select fields, based on fields omitted by Gratia
    #  - Sort remaining fields
    #  - Generate JSON
    #  - Calculate MD5
    ruby {
        code => "
            require 'openssl'
            require 'json'
            excl_keys = ['RecordId','CreateTime','GlobalUsername','LocalUserId',
                      'VOName','ReportableVOName','CommonName','SiteName','Grid',
                      'RawXML','type','@timestamp','@received','@version']
            rec_to_hash = event.to_hash.reject {|k,v| excl_keys.include?(k)}
            rec_str = Hash[rec_to_hash.sort].to_json
            #event['checksum_str'] = rec_str
            event['checksum'] = OpenSSL::Digest.hexdigest('md5',rec_str)
        "
    }
    # Fix overloaded fields
    if [ResourceType] == "Payload" {
        mutate {
            add_field => {"PayloadSiteName" => "%{Host_description}"}
        }
    }
    # Pre-compute derived fields
    ruby {
        code => "event['CoreHours'] = Float(event['WallDuration'] || 0.0) * Float(event['Processors'] || 1.0) / 3600.0"
    }
    # Quarantine
    if (![StartTime]) {
        mutate {
            add_field => {"Quarantine" => "MissingStartTime"}
        }
    }
    ruby {
        code => "event['Quarantine'] ||= 'EpochStartTime' if (event.include?('StartTime') and Time.parse(event['StartTime']).to_i <= 86400)"
    }
}
output {
    if [Quarantine] {
        elasticsearch {
            hosts => [ "${ELASTICSEARCH_HOST:localhost}" ]
            index => "gracc.${GRACC_STREAM}.raw3-quarantine"
            document_id => "%{checksum}"
            template_name => "gracc.raw3"
            template => "/etc/gracc-stash/gracc-raw-template.json"
            manage_template => true
            template_overwrite => true
        }
    } else {
        elasticsearch {
            hosts => [ "${ELASTICSEARCH_HOST:localhost}" ]
            index => "gracc.${GRACC_STREAM}.raw3-%{+YYYY.MM}"
            document_id => "%{checksum}"
            template_name => "gracc.raw3"
            template => "/etc/gracc-stash/gracc-raw-template.json"
            manage_template => true
            template_overwrite => true
        }
    }
    #stdout {codec => "rubydebug"}
}
